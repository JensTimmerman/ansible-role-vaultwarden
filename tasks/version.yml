---
- name: "Determine 'latest' version release"
  when: vaultwarden_version == "latest"
  block:
    - name: "Get latest vaultwarden release metadata"
      ansible.builtin.uri:
        url: https://api.github.com/repos/dani-garcia/vaultwarden/releases/latest
        return_content: true
      register: vaultwarden_remote_metadata
      when: not ansible_check_mode

    - name: "Fail if running in check mode without versions set."
      ansible.builtin.fail:
        msg: |
          "You are running this playbook in check mode:
            Please set the Vaultwarden and webvault version with the variable 'vaultwarden_version' and
            'vaultwarden_webvault_version', because the URI module cannot detect the latest version in this mode."
      when: ansible_check_mode and (vaultwarden_version == 'latest')

    - name: "Set fact latest vaultwarden release"
      ansible.builtin.set_fact:
        vaultwarden_remote_version: "{{ vaultwarden_remote_metadata.json.tag_name }}"
      when: not ansible_check_mode

    - name: "Get latest vaultwarden webvault release metadata"
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/dani-garcia/vaultwarden/{{ vaultwarden_remote_version }}/docker/DockerSettings.yaml
        return_content: true
      register: vaultwarden_webvault_remote_metadata
      when: not ansible_check_mode

    - name: "Set fact latest vaultwarden webvault release"
      ansible.builtin.set_fact:
        vaultwarden_webvault_remote_version: "{{ vaultwarden_webvault_remote_metadata.content |
        regex_search('vault_version: [^\n]*') | regex_replace('.*\"([^\"]+)\".*', '\\1') }}"
      when: not ansible_check_mode

    - name: "print latest vaultwarden webvault release"
      ansible.builtin.debug:
        msg: "{{ vaultwarden_webvault_remote_version }}"
      when: not ansible_check_mode

    - name: "Set vaultwarden version target (latest)"
      ansible.builtin.set_fact:
        vaultwarden_target_version: "{{ vaultwarden_remote_version }}"
        vaultwarden_webvault_target_version: "{{ vaultwarden_webvault_remote_version[1:] }}"
      when: not ansible_check_mode

- name: "Set vaultwarden version target {{ vaultwarden_version }}"
  ansible.builtin.set_fact:
    vaultwarden_target_version: "{{ vaultwarden_version }}"
    vaultwarden_webvault_target_version: "{{ vaultwarden_webvault_version }}"
  when: vaultwarden_version != "latest"
